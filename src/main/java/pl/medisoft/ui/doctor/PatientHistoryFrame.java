/*
 * The GNU GPL License 
 * Copyright (c) 2015-2016 IT Students of 5th year 
 * at the University of Maria Curie-Sklodowska in Lublin 
 */
package pl.medisoft.ui.doctor;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.AbstractTableModel;
import pl.medisoft.application.configuration.ModuleEnum;
import pl.medisoft.application.identity.IdentityProvider;
import pl.medisoft.application.message.Messages;

/**
 *
 * @author michal.zahir
 */
public class PatientHistoryFrame extends javax.swing.JFrame {

    /**
     * Creates new form PatientFrame
     */
    private static final String[] HEADERS = {"lp", "Diagnosis", "Referral", "Visit"};
    private final Messages messages = Messages.getInstace();
    private final String MODULE_NAME = messages.get(ModuleEnum.ADMIN_USER.getMessageKey());
    private final DiagnosisDao diagnosisDao = new DiagnosisDaoJpa();
    private final Long Patient_id;
    private final Long Visit_id;

    public List<Diagnosis> findAllVisit(long PatientId) {
        return diagnosisDao.findAllVisit(PatientId);
        //IdentityProvider.identity.getId()
    }

    public PatientHistoryFrame() {

        Patient_id = 0L;
        Visit_id = 0L;
        initComponents();
    }

    public PatientHistoryFrame(long patientId, long visitId) {
        this.Patient_id = patientId;
        this.Visit_id = visitId;
        initComponents();
        List<Diagnosis> allDiagnosis = findAllVisit(patientId);
        initTable(allDiagnosis);

    }

    private void initTable(final List<Diagnosis> list) {

        PatientTable.setModel(new AbstractTableModel() {

            @Override
            public int getRowCount() {
                return list.size();
            }

            @Override
            public int getColumnCount() {
                return 4;
            }

            @Override
            public String getValueAt(int rowIndex, int columnIndex) {
                Diagnosis g = list.get(rowIndex);
                switch (columnIndex) {
                    case 0:
                        return String.valueOf(rowIndex + 1);
                    case 1:
                        return g.getDiagnoses();
                    case 2:
                        return g.getSkierowanie();
                    case 3:
                        return g.getVisitId().toString();

                    default:
                        return "error";
                }
            }

            @Override
            public String getColumnName(int columnIndex) {
                return messages.get(HEADERS[columnIndex]);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("jdbc:oracle:thin:@212.182.25.64:1521:XEPU").createEntityManager();
        diagnosisQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT d FROM Diagnosis d");
        diagnosisList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : diagnosisQuery.getResultList();
        jScrollPane1 = new javax.swing.JScrollPane();
        PatientTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        DiagnosisTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ReferalTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        SaveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(PatientTable);

        DiagnosisTextArea.setColumns(20);
        DiagnosisTextArea.setRows(5);
        jScrollPane2.setViewportView(DiagnosisTextArea);

        jLabel1.setText("Diagnosis");

        ReferalTextArea.setColumns(20);
        ReferalTextArea.setRows(5);
        jScrollPane3.setViewportView(ReferalTextArea);

        jLabel2.setText("Referal");

        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(52, 52, 52)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(SaveButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(SaveButton)
                .addGap(0, 157, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
                Diagnosis dd = new Diagnosis();
                dd.setDiagnoses(DiagnosisTextArea.getText());
                if (ReferalTextArea.getText()!= ""){
                dd.setSkierowanie(ReferalTextArea.getText());
                }
                else
                    dd.setSkierowanie("   ");
                dd.setPatientId(BigInteger.valueOf(Patient_id));
                dd.setVisitId(BigInteger.valueOf(Visit_id));
                dd.setId(BigDecimal.valueOf(diagnosisDao.getNextValueSeq()+4));
                boolean Added = diagnosisDao.addDiagnosis(dd);
                if (Added = true){
                     new DoctorFrame(this).setVisible(true);
                     setVisible(false);
                     dispose();
                    
                }
                
    }//GEN-LAST:event_SaveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientHistoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientHistoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientHistoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientHistoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientHistoryFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea DiagnosisTextArea;
    private javax.swing.JTable PatientTable;
    private javax.swing.JTextArea ReferalTextArea;
    private javax.swing.JButton SaveButton;
    private java.util.List<pl.medisoft.ui.doctor.Diagnosis> diagnosisList;
    private javax.persistence.Query diagnosisQuery;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
